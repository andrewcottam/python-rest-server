#!/usr/bin/env python 
# Google Earth Engine Python API wrapper to allow clients to use the results of the GEE API
import web, json, sys, re, datetime, urllib, psycopg2, ast, ee, uuid, cPickle, logging, earthEngine, glob, cairosvg, serviceRequest, urllib
from earthEngine import GoogleEarthEngineError
from serviceRequest import RESTServicesError
from ee import EEException
from psycopg2 import ProgrammingError, DataError, IntegrityError, extensions, OperationalError
from resources import dbconnect, google_earth_engine
from urlparse import parse_qs

#=====================  CONSTANTS  ==================================================================================================================================================================================================================

CAS_SERVER = "https://intragate.ec.europa.eu"
WEBPY_COOKIE_NAME = "webpy_session_id"

#=====================  URL HANDLERS  ==================================================================================================================================================================================================================

urls = (
  "/proxy_marinetraffic", "proxy_marinetraffic",
  "/proxy_xenocanto", "proxy_xenocanto",
  "/proxy_xenocanto_download", "proxy_xenocanto_download",
  "/createDownloadFile", "createDownloadFile",
  "/downloadFile", "downloadFile",
  "/updatehsv", "updatehsv",
  "/getDatesForBB", "getDatesForBB",
  "/getDatesForPoint", "getDatesForPoint",
  "/getScenesForPoint", "getScenesForPoint",
  "/getScenesForPointShort", "getScenesForPointShort",
  "/getValuesForPoint", "getValuesForPoint",
  "/getValuesForPoints", "getValuesForPoints",
  "/getValuesForPolygon", "getValuesForPolygon",
  "/createValidationSites", "createValidationSites",
  "/WMS_image", "gee_WMS_image",
  "/WMS_sequence", "gee_WMS_sequence",
  "/WMS_video", "gee_WMS_video",
  "/svg2png", "svg2png"
)

app = web.application(urls, locals()) 
session = web.session.Session(app, web.session.DiskStore('../../htdocs/mstmp/restSessions'))  

class proxy_marinetraffic():
    def GET(self):
        params = dict([(q.split("=")[0], urllib.unquote(q.split("=")[1])) for q in web.ctx.query[1:].split("&")])
        minlat = params['minlat'] # -17.447367
        maxlat = params['maxlat'] 
        minlon = params['minlon'] # 178.952866 fiji
        maxlon = params['maxlon']
        callback = params['callback']
        fields = ["MMSI","LAT","LON","SPEED","COURSE","TIMESTAMP","SHIPNAME","SHIPTYPE","IMO","CALLSIGN","FLAG","CURRENT_PORT","LAST_PORT","LAST_PORT_TIME","DESTINATION","ETA","LENGTH","WIDTH","DRAUGHT","GRT","DWT","YEAR_BUILT"]
        url = "http://services.marinetraffic.com/api/exportvessels/fccda29203b479d6d5e611f82001a9e5753760a3/MINLAT:" + minlat + "/MAXLAT:" + maxlat + "/MINLON:" + minlon + "/MAXLON:" + maxlon + "/timespan:10/protocol:json/msgtype:extended"
        response = urllib.urlopen(url)
        if response.read().index("NOT ENOUGH CREDITS FOR CALL")>0: #no more credits
            response = [["240391000","-17.447367","178.952866","1","50","2012-04-18T21:10:00","MEGALOCHARI VII","52","9039949","SY 6064","GR","MYKONOS","MYKONOS","2012-04-18T17:13:00","MIKONOS","1900-01-01T00:00:00","27","9","48","265","183","1991"],["237106400","-17.448367","178.954866","0","0","2012-04-18T21:10:00","AGIA ELENI","31","0","SV4137","GR","MYKONOS","MYKONOS","2012-04-18T17:12:00","MYKONOS","2012-04-30T11:00:00","30","7","0"],["311029000","-17.445367","178.954266","132","40","2012-04-18T21:09:00","GREEN MAGNIFIC","79","9011492","C6VY3","BS","","SKAGEN","2012-02-21T18:34:00","ODESA","2012-04-21T20:00:00","136","16","75","5103","6116","1992"]]
        structured = [[(fields[i],response[j][i]) for i in range(len(response[j]))] for j in range(len(response))]
        web.header("Content-Type", "application/javascript")
        return callback + '(' + json.dumps(dict(ships=[dict([(fields[i],response[j][i]) for i in range(len(response[j]))]) for j in range(len(response))])) + ")"

class proxy_xenocanto():
    def GET(self):
        params = parse_qs(web.ctx.query[1:])
        callback = params['callback'][0]
        url = "http://www.xeno-canto.org/api/2/recordings?query=" + params['name'][0]
        response = urllib.urlopen(url).read()
        web.header("Content-Type", "application/javascript")
        return callback + "(" + response + ")"

class proxy_xenocanto_download():
    def GET(self):
        params = parse_qs(web.ctx.query[1:])
        response = urllib.urlopen(params['file'][0])
        web.header("Content-Type", "audio/mpeg")
        return response 

class createDownloadFile():
    def POST(self):
        webDataDict = dict()
        webData = web.data().split("&")
        for item in webData:
            kv = item.split("=")
            webDataDict[kv[0]] = kv[1]
        filename = webDataDict['filename']
        algorithm = webDataDict['algorithm']
        f = open(r'../../htdocs/mstmp/' + filename, 'wb')
        f.write(urllib.unquote(algorithm))
        f.close()
        return filename
    
class downloadFile():
    def GET(self):
        filename = web.input()['filename']
        f = open(r'../../htdocs/mstmp/' + filename, 'r')
        algorithm = f.read()
        f.close()
        web.header("Content-Type", "text/plain")
        web.header("Content-Disposition", "attachment; filename=%s" % filename)
        return algorithm


class updatehsv():
    def GET(self):
        hsv = web.input()['hsv']
        conn = dbconnect("gee")
        conn.cur.execute("UPDATE especies.gee_training_data SET hue = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).hue")
        conn.cur.execute("UPDATE especies.gee_training_data SET saturation = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).saturation")
        conn.cur.execute("UPDATE especies.gee_training_data SET val = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).val")
        return "Done"

class svg2png:
    def POST(self):
        svg = web.data()
        filename = str(uuid.uuid4()) + ".png"
        cairosvg.svg2png (svg , write_to='../../htdocs/mstmp/' + filename)
        if (web.ctx.host == "dopa-services.jrc.it"):
            domain = "lrm-maps.jrc.it/"
        else:
            domain = "lrm-maps.jrc.ec.europa.eu/"
        url = "http://" + domain + "/mstmp/" + filename
        return url

class getDatesForBB:  # http://dopa-services.jrc.it/gee/getDatesForBB?BBOX=114,5,115,6&CRS=EPSG:4326
    def GET(self):
        ll_x, ll_y, ur_x, ur_y = web.input()['BBOX'].split(",")
        dates = earthEngine.getDatesForBB(ll_x, ll_y, ur_x, ur_y, web.input()['CRS'])
        if 'callback' in web.input().keys():
            return web.input()['callback'] + "({'dates':['" + "','".join([d for d in dates]) + "']})"  # return as a jsonp
        else:
            return "{'dates':['" + "','".join([d for d in dates]) + "']}"  

class getDatesForPoint:  # http://dopa-services.jrc.it/gee/getDatesForPoint?POINT=114,5&CRS=EPSG:4326
    def GET(self):
        x, y = web.input()['POINT'].split(",")
        dates = earthEngine.getDatesForPoint(x, y, web.input()['CRS'])
        if 'callback' in web.input().keys():
            return web.input()['callback'] + "({'dates':['" + "','".join([d for d in dates]) + "']})"  # return as a jsonp
        else:
            return "{'dates':['" + "','".join([d for d in dates]) + "']}"  

class getScenesForPoint:  # http://dopa-services.jrc.it/gee/getScenesForPoint?POINT=14.84368017499996,-3.990951058630029&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T
    def GET(self):
        x, y = web.input()['POINT'].split(",")
        scenes = earthEngine.getScenesForPoint(web.input()['collection'], x, y, web.input()['CRS'])
        return serviceRequest.getJsonResponse(json.dumps(scenes))

class getScenesForPointShort:  # http://dopa-services.jrc.it/gee/getScenesForPointShort?POINT=14.84368017499996,-3.990951058630029&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T
    def GET(self):
        x, y = web.input()['POINT'].split(",")
        scenes = earthEngine.getScenesForPointShort(web.input()['collection'], x, y, web.input()['CRS'])
        return serviceRequest.getJsonResponse(json.dumps(scenes))

class getValuesForPoint:  # http://dopa-services.jrc.it/gee/getValuesForPoint?sceneid=L7_L1T%2FLE70310432001166EDC01&POINT=-105.83545,24.42247&CRS=EPSG:4326
    def GET(self):
        params = web.input()
        x, y = web.input()['POINT'].split(",")
        vals = earthEngine.getValuesForPoint(params['sceneid'], x, y, web.input()['CRS'])
        return serviceRequest.getJsonResponse(json.dumps(vals))
            
class getValuesForPoints:  # http://dopa-services.jrc.it/gee/getValuesForPoints?sceneid=L7_L1T%2FLE70310432001166EDC01&points=[[-105.83545,24.42247],[-105.84545,24.42247]]
    def GET(self):
        params = web.input()
        pointsArray = ast.literal_eval(params['points'])
        vals = earthEngine.getValuesForPoints(params['sceneid'], pointsArray)
        return serviceRequest.getJsonResponse(json.dumps(vals))

class getValuesForPolygon:  # 
    def GET(self):
        return 'not yet implemented'

class gee_WMS_image:  # returns a url to an image created by google earth engine
    def GET(self):
        try:
            logging.basicConfig(filename='../../htdocs/mstmp/earthEngine.log', level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s',)
            # PARAMETER PARSING
            wmsParameters = wmsParams(web.input())  # get the WMS parameters
            layerParameters = ast.literal_eval(wmsParameters.layers)
            # SET THE BOUNDING BOX
            if wmsParameters.version == "1.3.0":  # get the ll and ur x/y coordinates
                ll_x, ll_y, ur_x, ur_y = wmsParameters.bbox.split(",")
            else:
                ll_x, ll_y, ur_x, ur_y = wmsParameters.bbox.split(",")  # same for the moment
            # GET THE IMAGE THUMBNAIL 
            logging.info("GEE image request: ll_x=" + ll_x + "  ll_y=" + ll_y + " ur_x=" + ur_x + " ur_y=" + ur_y + " crs=" + wmsParameters.crs + " width=" + str(wmsParameters.width) + " height=" + str(wmsParameters.height) + " layerParameters=" + str(layerParameters))
            output_thumbnail = earthEngine.getImage(float(ll_x), float(ll_y), float(ur_x), float(ur_y), wmsParameters.crs, wmsParameters.width, wmsParameters.height, layerParameters)
            logging.info("GEE image request complete")
            # RETURN A LINK TO THE THUMBNAIL 
            return returnThumbnailJSON(output_thumbnail)

        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        

class gee_WMS_sequence():  # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=-480654,1687548&CRS=EPSG:102100&collection=LANDSAT/LC8_L1T
    # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=32.84882974169116,14.36796906455707&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T #for Sudan
    # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=-4.364599555187313,14.683008234697786&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T #for Mopti Mali
    def GET(self):
        try:
            x, y = web.input()['POINT'].split(",")
            scenes = earthEngine.getScenesForPoint(web.input()['collection'], x, y, web.input()['CRS'])
            layerParameters = {"hsvDetect":True}
            for scene in scenes['features']:
                sceneid = scene['id']
                ll_x = scene['properties']['CORNER_LL_LON_PRODUCT']
                ll_y = scene['properties']['CORNER_LL_LAT_PRODUCT']
                ur_x = scene['properties']['CORNER_UR_LON_PRODUCT']
                ur_y = scene['properties']['CORNER_UR_LAT_PRODUCT']
                date_acquired = scene['properties']['DATE_ACQUIRED']
                output_thumbnail = earthEngine.getSceneImage(sceneid, ll_x, ll_y, ur_x, ur_y, "EPSG:4326", "1000", "1000", layerParameters)
                filename = urllib.urlretrieve(output_thumbnail, '../../htdocs/mstmp/landsat_' + date_acquired + '.png')
            imgFiles = glob.glob('../../htdocs/mstmp/landsat_*.png')
            return filename
        
        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        

class gee_WMS_video():
    def GET(self):
        try:
#             sys.path.append('/usr/local/src/opencv-2.4.8')
            images = glob.glob ('/srv/www/htdocs/mstmp/landsat_*.png')
            img = cv2.imread(images[0])
            height , width , layers = img.shape
            video = cv2.VideoWriter('/srv/www/htdocs/mstmp/video.avi', -1, 1, (width, height))
            for image in images:
                video.write(cv2.imread(image))
            cv2.destroyAllWindows()  # giving an error at the moment
            video.release()
            return "done"

        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        
                
class createValidationSites:  # http://dopa-services.jrc.it/gee/createValidationSites?sceneid=LANDSAT%2FLC8_L1T%2FLC81970502013330LGN00&scenedate=2013-11-26%2010%3A39%3A38.1039567Z&draftSites=%5B%5B-4.113173959020702%2C14.960465199416%2C%22Waterbodies%22%5D%2C%5B-4.258742806677007%2C14.927294080825337%2C%22Waterbodies%22%5D%2C%5B-4.210677621130114%2C14.862263844590363%2C%22Waterbodies%22%5D%5D&callback=dojo_request_script_callbacks.dojo_request_script7&username=Andrew%20Cottam
    def GET(self):
        try:
            # GET THE INPUT PARAMETERS
            params = web.input()
            username = params['username']
            scenedate = params['scenedate']
            sceneid = params['sceneid']
            s = sceneid[sceneid.find('/') + 1:sceneid.find('/') + 3]
            if s == "LC":
                sensor = "Landsat 8"
            elif s == "L5":
                sensor = "Landsat 5"
                raise DopaServicesError('Creating validation sites is currently not implemented for Landsat 5') 
            elif s == "L7":
                sensor = "Landsat 7"
                raise DopaServicesError('Creating validation sites is currently not implemented for Landsat 7') 
            # GET THE POINTS
            sitesArray = ast.literal_eval(params['draftSites'])  # the the array of draft sites
            lc = [item[2] for item in sitesArray]  # get the land cover types from the array
            pointsArray = [[item[0], item[1]] for item in sitesArray]  # get the array of points from the draft sites
            data = earthEngine.getValuesForPoints(params['sceneid'], pointsArray)  # send these to GEE to get the pixel values
            if len(data) == 1:
                raise DopaServicesError('No validation sites created. Google Earth Engine did not have any pixel data for the passed geometries')
            fields = data[0]  # get the fields returned from GEE
            fieldValues = data[1:]  # get the field values returned from GEE
            insertinto = "INSERT INTO especies.gee_training_data(land_cover, lat, lng, sensor, sceneid, image_date, band1, band2, band3, band4, band5, band6, band7, band8, band9, band10, band11, bqa, username, entry_date, hue, saturation,value,ndvi,ndwi) VALUES"
            values = ""
            for i in range(len(data[1:])):  # create the VALUES (''),('') statement
                values = values + "('" + lc[i] + "'," + str(fieldValues[i][2]) + "," + str(fieldValues[i][1]) + ",'" + sensor + "','" + sceneid + "','" + scenedate + "'"
                for j in range(len(fields[4:])):  # iterate through the bands pixel values to write the string
                    value = fieldValues[i][j + 4]
                    if (value):
                        values = values + "," + str(value)
                    else:
                        raise DopaServicesError('No data for band ' + str(j + 1))
                h, s, v = rgbTohsv(fieldValues[i][10], fieldValues[i][8], fieldValues[i][7])  # bands B7, B5, B4 for Landsat 8
                ndvi = (fieldValues[i][8]- fieldValues[i][7])/(fieldValues[i][8]+ fieldValues[i][7])
                ndwi = (fieldValues[i][8]- fieldValues[i][9])/(fieldValues[i][8]+ fieldValues[i][9])
                values = values + ",'" + username + "','" + str(datetime.datetime.now()) + "'," + str(h) + "," + str(s) + "," + str(v) + "," + str(ndvi) + "," + str(ndwi) + "),"
            sql = insertinto + values[:-1]
            conn = dbconnect("gee")
            conn.cur.execute(sql)
            responsejson = json.dumps({'rowcount':conn.cur.rowcount})
            return serviceRequest.getJsonResponse(responsejson)
                        
        except (DopaServicesError, GoogleEarthEngineError) as e:
            return serviceRequest.returnError("metadata", "records", 0, e.message)        
    
class wmsParams:  # class to retrieve the standard wms parameters
    def __init__(self, parameters):
        self.style = parameters['STYLES']
        self.service = parameters['SERVICE']
        self.crs = parameters['CRS']
        self.format = parameters['FORMAT']
        self.request = parameters['REQUEST']
        self.height = parameters['HEIGHT']
        self.width = parameters['WIDTH']
        self.version = parameters['VERSION']
        self.bbox = parameters['BBOX']
        self.transparent = parameters['TRANSPARENT']
        self.layers = parameters['LAYERS']  # {"sceneid":"LANDSAT/LC8_L1T_TOA/LC81970502014109LGN00","redBand":"B4","greenBand":"B3","blueBand":"B2","min":0,"max":0.4}
    
def returnThumbnailJSON(url):
    params = serviceRequest.getQueryStringParams(web.ctx.query[1:])  # get the querystring parameters to get the callback function name
    responsejson = json.dumps({"url":url})
    return serviceRequest.getJsonResponse(responsejson)

def createGoogleAPIJson():
    gee_authenticate()
    f = open(r'google earth engine/_api.pickle', 'wb')
    cPickle.dump(ee.ApiFunction._api, f)
    f.close()

def rgbTohsv(r, g, b):  # utility function to convert rgb values to hsv values
    maxVal = float(max(r, g, b))
    minVal = float(min(r, g, b))
    val = maxVal
    saturation = (val - minVal) / maxVal
    if val == minVal:
        hue = 0
    elif val == r:
        hue = ((((g - b) / (val - minVal)) * 60) + 360) % 360
    elif val == g:
        hue = (((b - r) / (val - minVal) * 60) + 120)
    elif val == b:
        hue = (((r - g) / (val - minVal) * 60) + 240)
    return (hue, saturation, val)

if __name__ == "__main__":
    app.run()
